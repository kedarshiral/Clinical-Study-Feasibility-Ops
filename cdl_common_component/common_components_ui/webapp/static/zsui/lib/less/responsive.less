@grid-gutter-width: 0px;
//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Extra small screen / phone
//** Deprecated `@screen-xs` as of v3.0.1
@screen-xs: 480px;
//** Deprecated `@screen-xs-min` as of v3.2.0
@screen-xs-min: @screen-xs;
//** Deprecated `@screen-phone` as of v3.0.1
@screen-phone: @screen-xs-min;

// Small screen / tablet
//** Deprecated `@screen-sm` as of v3.0.1
@screen-sm: 768px;
@screen-sm-min: @screen-sm;
//** Deprecated `@screen-tablet` as of v3.0.1
@screen-tablet: @screen-sm-min;

// Medium screen / desktop
//** Deprecated `@screen-md` as of v3.0.1
@screen-md: 992px;
@screen-md-min: @screen-md;
//** Deprecated `@screen-desktop` as of v3.0.1
@screen-desktop: @screen-md-min;

// Large screen / wide desktop
//** Deprecated `@screen-lg` as of v3.0.1
@screen-lg: 1200px;
@screen-lg-min: @screen-lg;
//** Deprecated `@screen-lg-desktop` as of v3.0.1
@screen-lg-desktop: @screen-lg-min;

// So media queries don't overlap when required, provide a maximum
@screen-xs-max: (@screen-sm-min - 1);
@screen-sm-max: (@screen-md-min - 1);
@screen-md-max: (@screen-lg-min - 1);

//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
@container-tablet: (720px + @grid-gutter-width);
//** For `@screen-sm-min` and up.
@container-sm: @container-tablet;

// Medium screen / desktop
@container-desktop: (940px + @grid-gutter-width);
//** For `@screen-md-min` and up.
@container-md: @container-desktop;

// Large screen / wide desktop
@container-large-desktop: (1140px + @grid-gutter-width);
//** For `@screen-lg-min` and up.
@container-lg: @container-large-desktop;


//
// Responsive: Utility classes
// --------------------------------------------------


// IE10 in Windows (Phone) 8
//
// Support for responsive views via media queries is kind of borked in IE10, for
// Surface/desktop in split view and for Windows Phone 8. This particular fix
// must be accompanied by a snippet of JavaScript to sniff the user agent and
// apply some conditional CSS to *only* the Surface/desktop Windows 8. Look at
// our Getting Started page for more information on this bug.
//
// For more information, see the following:
//
// Issue: https://github.com/twbs/bootstrap/issues/10497
// Docs: http://getbootstrap.com/getting-started/#support-ie10-width
// Source: http://timkadlec.com/2013/01/windows-phone-8-and-device-width/
// Source: http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/

@-ms-viewport {
	width: device-width;
}


// Visibility utilities
// Note: Deprecated .zs-visible-xs, .zs-visible-sm, .zs-visible-md, and .zs-visible-lg as of v3.2.0
.zs-visible-xs,
.zs-visible-sm,
.zs-visible-md,
.zs-visible-lg {
	.responsive-invisibility();
}

.zs-visible-xs-block,
.zs-visible-xs-inline,
.zs-visible-xs-inline-block,
.zs-visible-sm-block,
.zs-visible-sm-inline,
.zs-visible-sm-inline-block,
.zs-visible-md-block,
.zs-visible-md-inline,
.zs-visible-md-inline-block,
.zs-visible-lg-block,
.zs-visible-lg-inline,
.zs-visible-lg-inline-block {
	display: none !important;
}

.zs-visible-xs {
	@media (max-width: @screen-xs-max) {
		.responsive-visibility();
	}
}

.zs-visible-xs-block {
	@media (max-width: @screen-xs-max) {
		display: block !important;
	}
}

.zs-visible-xs-inline {
	@media (max-width: @screen-xs-max) {
		display: inline !important;
	}
}

.zs-visible-xs-inline-block {
	@media (max-width: @screen-xs-max) {
		display: inline-block !important;
	}
}

.zs-visible-sm {
	@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
		.responsive-visibility();
	}
}

.zs-visible-sm-block {
	@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
		display: block !important;
	}
}

.zs-visible-sm-inline {
	@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
		display: inline !important;
	}
}

.zs-visible-sm-inline-block {
	@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
		display: inline-block !important;
	}
}

.zs-visible-md {
	@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
		.responsive-visibility();
	}
}

.zs-visible-md-block {
	@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
		display: block !important;
	}
}

.zs-visible-md-inline {
	@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
		display: inline !important;
	}
}

.zs-visible-md-inline-block {
	@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
		display: inline-block !important;
	}
}

.zs-visible-lg {
	@media (min-width: @screen-lg-min) {
		.responsive-visibility();
	}
}

.zs-visible-lg-block {
	@media (min-width: @screen-lg-min) {
		display: block !important;
	}
}

.zs-visible-lg-inline {
	@media (min-width: @screen-lg-min) {
		display: inline !important;
	}
}

.zs-visible-lg-inline-block {
	@media (min-width: @screen-lg-min) {
		display: inline-block !important;
	}
}

.zs-hidden-xs {
	@media (max-width: @screen-xs-max) {
		.responsive-invisibility();
	}
}

.zs-hidden-sm {
	@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
		.responsive-invisibility();
	}
}

.zs-hidden-md {
	@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
		.responsive-invisibility();
	}
}

.zs-hidden-lg {
	@media (min-width: @screen-lg-min) {
		.responsive-invisibility();
	}
}

// Responsive utilities

//
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() {
	display: block !important;

	table& {
		display: table !important;
	}

	tr& {
		display: table-row !important;
	}

	th&,
	td& {
		display: table-cell !important;
	}
}

.responsive-invisibility() {
	display: none !important;
}
